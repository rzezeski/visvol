#! /bin/bash
#
# Generate a protovis graphic that shows the amount of volatility in
# the given codebase.  It only works with git.
# 
#- usage:
#-   visvol [ --help ]
#-          [ --version ]
#-          [ --lookback <lookback> ]
#-          [ --commit-ceil <commit-ceil> ]
#-          [ --git-path <git-path> ]
#-          [ <path> ]

usage_and_exit()
{
    sed -n 's/^#-// p' $0
    exit $1
}

error()
{
    echo "$@" 1>&2
    usage_and_exit 1
}

version()
{
    echo "$PROGRAM $VERSION"
    exit 0
}

PROGRAM=$(basename $0)
VERSION=0.1.0
FILE_LIST=$(mktemp /tmp/$PROGRAM.XXXX)
lookback="6 months ago"
commit_ceil=12
path=.
git_paths=

trap "rm -f $FILE_LIST" EXIT

while test "$#" -gt 0
do
    case $1 in
        --help)
            usage_and_exit 0
            ;;
        --version | -V)
            version
            ;;
        --lookback)
            shift
            lookback=$1
            ;;
        --commit-ceil)
            shift
            commit_ceil=$1
            ;;
        --git-path | -g )
            shift
            if ! test "$git_paths"
            then
                git_paths="-- $1"
            else
                git_paths="$git_paths $1"
            fi
            ;;
        -*)
            error "Unrecognized option: $1"
            ;;
        *)
            break
            ;;
    esac
    shift
done

commit_mid=$((commit_ceil/2))
path="$1"
file_to_num='
{ churn[$3] += ($1 + $2); commits[$3] += 1 }
END {
  for (f in churn)
    printf "%s %d %d\n",f, churn[f], commits[f]
}'

# lines added/removed
# remove blank lines
# map file to churn
# sort by most churn
(cd $path && \
    git log --since "$lookback" --numstat --pretty=format: $git_paths | \
    grep -v '^$' | \
    awk "$file_to_num" | \
    sort -k2,2nr > $FILE_LIST)

printf "files = {\n" > files.js
awk '{printf "  \"%s\": {\"churn\":%d, \"commits\":%d},\n", $1, $2, $3}' $FILE_LIST >> files.js
printf "};" >> files.js

sed -e "s/{{commit_mid}}/$commit_mid/" \
    -e "s/{{commit_ceil}}/$commit_ceil/" visvol.tmplt